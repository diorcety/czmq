/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
*/
package org.zeromq.czmq;

public class Ztrie implements AutoCloseable{
    public interface ZtrieDestroyDataFn {
        void  callback (long data);
    }

    public static class _ZtrieDestroyDataFn implements AutoCloseable, com.kenai.jffi.Closure {
        private final ZtrieDestroyDataFn inner;
        private final com.kenai.jffi.Closure.Handle handle;

        public _ZtrieDestroyDataFn (ZtrieDestroyDataFn inner) {
            this.inner = inner;
            this.handle = com.kenai.jffi.ClosureManager.getInstance().newClosure(this, com.kenai.jffi.Type.VOID, new com.kenai.jffi.Type[] {com.kenai.jffi.Type.SLONG}, com.kenai.jffi.CallingConvention.DEFAULT);
            this.handle.setAutoRelease(false);
        }

        @Override
        public void close () {
            handle.dispose();
        }

        @Override
        public void invoke(com.kenai.jffi.Closure.Buffer buffer) {
            inner.callback(buffer.getLong(0));
        }

        public long getAddress () {
            return handle.getAddress();
        }
    }

    public static _ZtrieDestroyDataFn ztrie_destroy_data_fn(ZtrieDestroyDataFn inner) {
        return inner != null ? new _ZtrieDestroyDataFn(inner) : null;
    }


    public long self;

    /*
    Creates a new ztrie.
    */
    native static long __new (char delimiter);
    public Ztrie (char delimiter) {
        /*  TODO: if __new fails, self is null...            */
        self = __new (delimiter);
    }
    public Ztrie (long pointer) {
        self = pointer;
    }
    /*
    Destroy the ztrie.
    */
    native static void __destroy (long self);
    @Override
    public void close () {
        __destroy (self);
        self = 0;
    }

    /*
    Inserts a new route into the tree and attaches the data. Returns -1
    if the route already exists, otherwise 0. This method takes ownership of
    the provided data if a destroy_data_fn is provided.
    */
    native static int __insertRoute (long self, String path, long data, long destroyDataFn);
    public int insertRoute (String path, long data, _ZtrieDestroyDataFn destroyDataFn) {
        return __insertRoute (self, path, data, destroyDataFn.getAddress());
    }
    /*
    Removes a route from the trie and destroys its data. Returns -1 if the
    route does not exists, otherwise 0.
    the start of the list call zlist_first (). Advances the cursor.
    */
    native static int __removeRoute (long self, String path);
    public int removeRoute (String path) {
        return __removeRoute (self, path);
    }
    /*
    Returns true if the path matches a route in the tree, otherwise false.
    */
    native static boolean __matches (long self, String path);
    public boolean matches (String path) {
        return __matches (self, path);
    }
    /*
    Returns the data of a matched route from last ztrie_matches. If the path
    did not match, returns NULL. Do not delete the data as it's owned by
    ztrie.
    */
    native static long __hitData (long self);
    public long hitData () {
        return __hitData (self);
    }
    /*
    Returns the count of parameters that a matched route has.
    */
    native static long __hitParameterCount (long self);
    public long hitParameterCount () {
        return __hitParameterCount (self);
    }
    /*
    Returns the parameters of a matched route with named regexes from last
    ztrie_matches. If the path did not match or the route did not contain any
    named regexes, returns NULL.
    */
    native static long __hitParameters (long self);
    public Zhashx hitParameters () {
        return new Zhashx (__hitParameters (self));
    }
    /*
    Returns the asterisk matched part of a route, if there has been no match
    or no asterisk match, returns NULL.
    */
    native static String __hitAsteriskMatch (long self);
    public String hitAsteriskMatch () {
        return __hitAsteriskMatch (self);
    }
    /*
    Print the trie
    */
    native static void __print (long self);
    public void print () {
        __print (self);
    }
    /*
    Self test of this class.
    */
    native static void __test (boolean verbose);
    public static void test (boolean verbose) {
        __test (verbose);
    }
}
